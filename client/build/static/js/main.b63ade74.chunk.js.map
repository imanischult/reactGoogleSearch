{"version":3,"sources":["components/Searchresult/Searchresult.js","components/Savedresult/Savedresult.js","App.js","registerServiceWorker.js","index.js"],"names":["Search","state","books","query","handleInputChange","event","_this","setState","target","value","fetchbooks","e","preventDefault","axios","get","concat","then","res","data","items","catch","err","console","log","saveBook","book","post","title","volumeInfo","authors","description","image","imageLinks","thumbnail","link","previewLink","_this2","this","react_default","a","createElement","onSubmit","htmlFor","id","type","onChange","map","result","key","author","rel","href","onClick","React","Component","Saved","saved","fetchSaved","_id","App","react_router_dom","className","to","react_router","exact","path","component","Searchresult","Savedresult","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b63ade74.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nclass Search extends React.Component {\n  state = {\n    books: [],\n    query: \"\"\n  };\n\n  handleInputChange = event => {\n    this.setState({ query: event.target.value });\n  };\n\n  fetchbooks = e => {\n    e.preventDefault();\n\n    axios\n      .get(`https://www.googleapis.com/books/v1/volumes?q=${this.state.query}`)\n      .then(res => {\n        this.setState({\n          books: res.data.items\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  saveBook = book => {\n    axios.post(\"/api/books\", {\n      title: book.volumeInfo.title,\n      authors: book.volumeInfo.authors,\n      description: book.volumeInfo.description,\n      image: book.volumeInfo.imageLinks.thumbnail,\n      link: book.volumeInfo.previewLink\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.fetchbooks}>\n          <label htmlFor=\"search\">Search</label>\n          <input id=\"search\" type=\"text\" onChange={this.handleInputChange} />\n          <button type=\"submit\">Search</button>\n        </form>\n\n        <hr />\n\n        {this.state.books.map(result => {\n          return (\n            <div key={result.id}>\n              <h2>{result.volumeInfo.title}</h2>\n              {result.volumeInfo.authors &&\n                result.volumeInfo.authors.map(author => {\n                  return <p key={author}>{author}</p>;\n                })}\n              <p>{result.volumeInfo.description}</p>\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={result.volumeInfo.previewLink}\n              >\n                View\n              </a>\n              <button onClick={() => this.saveBook(result)}>Save</button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Saved extends Component {\n  state = {\n    saved: []\n  };\n\n  componentDidMount() {\n    console.log(\"it is mounted\");\n    this.fetchSaved();\n  }\n\n  fetchSaved = () => {\n    axios.get(\"/api/books\").then(res => {\n      this.setState({ saved: res.data });\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <p> Saved Books </p>\n        {this.state.saved.map(book => {\n          return <div key={book._id}>{book.title}</div>;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Saved;\n","import React, { Component} from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Searchresult from \"./components/Searchresult/Searchresult\";\n\nimport Savedresult from \"./components/Savedresult/Savedresult\";\n\n\nclass App extends Component {\n  render() {\n  return (\n      <Router>\n      <nav>\n      <ul>\n        <li className=\"\">Google Books</li>\n        <li className=\"\">\n          <Link to=\"/\">Search</Link>\n        </li>\n        <li className=\"\">\n          <Link to=\"/books\">Saved</Link>\n        </li>\n      </ul>\n      </nav>\n        <div>\n          <h1>Google Books Search with React</h1>\n          <p> Search and Save Books of Interest</p>\n          </div>\n            <Route exact path=\"/\" component={Searchresult} />\n            <Route exact path=\"/search\" component={Searchresult} />\n            <Route exact path=\"/books\" component={Savedresult} />\n      </Router>\n   );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}